@startuml
package "com.piggymetrics.statistics.domain" {
  [ExchangeRatesContainer]
  [Account]
  [Saving]
  [Item]
}

package "com.piggymetrics.auth.domain" {
  [User]
}

package "com.piggymetrics.statistics.service" {
  [ExchangeRatesServiceImpl]
  [StatisticsServiceImpl]
}

package "com.piggymetrics.auth.service" {
  [UserServiceImpl]
}

package "com.piggymetrics.auth.service.security" {
  [MongoUserDetailsService]
  [CustomUserInfoTokenServices]
}

package "com.piggymetrics.auth.config" {
  [OAuth2AuthorizationConfig]
  [WebSecurityConfig]
}

package "com.piggymetrics.statistics.controller" {
  [StatisticsController]
}

package "com.piggymetrics.account.controller" {
  [AccountController]
  [ErrorHandler]
}

package "com.piggymetrics.auth.controller" {
  [UserController]
}

package "com.piggymetrics.notification.controller" {
  [RecipientController]
}

package "com.piggymetrics.notification.service" {
  [NotificationServiceImpl]
  [RecipientServiceImpl]
  [EmailServiceImpl]
}

package "com.piggymetrics.notification.domain" {
  [Recipient]
  [NotificationSettings]
}

package "com.piggymetrics.statistics.domain.timeseries" {
  [DataPoint]
  [DataPointId]
  [ItemMetric]
}

package "com.piggymetrics.account.domain" {
  [Account]
  [User]
  [Saving]
  [Item]
}

package "com.piggymetrics.account.service" {
  [AccountServiceImpl]
}

package "com.piggymetrics.account.config" {
  [ResourceServerConfig]
}

package "com.piggymetrics.statistics.config" {
  [ResourceServerConfig]
}

package "com.piggymetrics.notification.config" {
  [ResourceServerConfig]
}

package "com.piggymetrics.statistics.service.security" {
  [CustomUserInfoTokenServices]
}

package "com.piggymetrics.statistics.repository.converter" {
  [DataPointIdReaderConverter]
  [DataPointIdWriterConverter]
}

package "com.piggymetrics.notification.repository.converter" {
  [FrequencyReaderConverter]
  [FrequencyWriterConverter]
}

package "com.piggymetrics.account.client" {
  [StatisticsServiceClientFallback]
}

package "com.piggymetrics.statistics.client" {
  [ExchangeRatesClientFallback]
}

[ExchangeRatesContainer] --> [Account]
[Account] --> [Saving]
[Account] --> [Item]
[User] --> [UserServiceImpl]
[UserServiceImpl] --> [MongoUserDetailsService]
[UserServiceImpl] --> [CustomUserInfoTokenServices]
[OAuth2AuthorizationConfig] --> [WebSecurityConfig]
[StatisticsController] --> [ExchangeRatesServiceImpl]
[StatisticsController] --> [StatisticsServiceImpl]
[AccountController] --> [AccountServiceImpl]
[AccountController] --> [ErrorHandler]
[UserController] --> [UserServiceImpl]
[RecipientController] --> [RecipientServiceImpl]
[RecipientController] --> [NotificationServiceImpl]
[NotificationServiceImpl] --> [EmailServiceImpl]
[Recipient] --> [NotificationSettings]
[DataPoint] --> [DataPointId]
[DataPoint] --> [ItemMetric]
[Account] --> [Saving]
[Account] --> [Item]
[AccountServiceImpl] --> [StatisticsServiceClientFallback]
[ResourceServerConfig] --> [ResourceServerConfig]
[ResourceServerConfig] --> [ResourceServerConfig]
[CustomUserInfoTokenServices] --> [CustomUserInfoTokenServices]
[DataPointIdReaderConverter] --> [DataPointIdWriterConverter]
[FrequencyReaderConverter] --> [FrequencyWriterConverter]
[StatisticsServiceClientFallback] --> [ExchangeRatesClientFallback]
@endumlPrompt:You are going to pretend to be a software architect who’s job is to reverse engineer projects in order to create diagrams of the software architecture. Don’t pay too much attention to implementation details but try to model the most important components. 

Steps to Create a Component Diagram
Identify Components:

Group related classes into logical components. For example, classes related to customer management can be part of a CustomerService component.

Define Interfaces:
Identify the methods that act as interfaces for each component. These are the methods that other components will interact with.

Determine Dependencies:
Analyze the imports section and fields to identify dependencies between components. 

Organize Components:
Organize these components logically in the diagram, showing how they interact with each other using arrows to represent dependencies. Dont show methods in the diagram.

Can you generate a component diagram using the following information including class descriptions (imports, extends, implements, package, methods, parameters) based on a spring boot project. 	The sourcecode information is structured like this:
Class:<Classname>
implements:<Classnames>
extends:<Classnames>
Package:<Packagepath>
imports:<Imports>
Modifiers:<public/private/protected>
Field:<Fieldname: Type>
…
Method:<Method(parameters): Returntype> 
Also here is the content of the Docker-compose.yml of the whole project:version: '2.1'
services:
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - 15672:15672
    logging:
      options:
        max-size: "10m"
        max-file: "10"

  config:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD

  registry:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD

  gateway:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD

  auth-service:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD
      NOTIFICATION_SERVICE_PASSWORD: $NOTIFICATION_SERVICE_PASSWORD
      STATISTICS_SERVICE_PASSWORD: $STATISTICS_SERVICE_PASSWORD
      ACCOUNT_SERVICE_PASSWORD: $ACCOUNT_SERVICE_PASSWORD
      MONGODB_PASSWORD: $MONGODB_PASSWORD

  auth-mongodb:
    environment:
      MONGODB_PASSWORD: $MONGODB_PASSWORD

  account-service:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD
      ACCOUNT_SERVICE_PASSWORD: $ACCOUNT_SERVICE_PASSWORD
      MONGODB_PASSWORD: $MONGODB_PASSWORD

  account-mongodb:
    environment:
      INIT_DUMP: account-service-dump.js
      MONGODB_PASSWORD: $MONGODB_PASSWORD

  statistics-service:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD
      MONGODB_PASSWORD: $MONGODB_PASSWORD
      STATISTICS_SERVICE_PASSWORD: $STATISTICS_SERVICE_PASSWORD

  statistics-mongodb:
    environment:
      MONGODB_PASSWORD: $MONGODB_PASSWORD

  notification-service:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD
      MONGODB_PASSWORD: $MONGODB_PASSWORD
      NOTIFICATION_SERVICE_PASSWORD: $NOTIFICATION_SERVICE_PASSWORD

  notification-mongodb:
    image: sqshq/piggymetrics-mongodb
    restart: always
    environment:
      MONGODB_PASSWORD: $MONGODB_PASSWORD
    logging:
      options:
        max-size: "10m"
        max-file: "10"

  monitoring:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD

  turbine-stream-service:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD
Only return the plant uml information without using additional descriptions.
